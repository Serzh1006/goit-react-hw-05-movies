{"version":3,"file":"static/js/435.701ed396.chunk.js","mappings":"kLASA,EATiB,SAAAA,GACf,OAAIA,EAAIC,MACCD,EAAIC,MAETD,EAAIE,KACCF,EAAIE,UADb,CAGD,ECND,EAA4B,+BAA5B,EAA0E,kC,SCyB1E,EArBoB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC5B,OACE,eAAIC,UAAWC,EAAf,SACGH,EAAMI,KAAI,SAAAP,GACT,IAAMC,EAAQO,EAASR,GACvB,OACE,yBACE,SAAC,KAAD,CACEK,UAAWC,EACXG,GAAE,kBAAaT,EAAIU,IACnBC,MAAO,CAAEC,KAAMR,GAHjB,SAKGH,KANID,EAAIU,GAUhB,KAGN,C,uJCtBKG,EACC,4CADDA,EAEC,mCAGDC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,wNAIOC,EAAgB,mCAAG,WAAMC,GAAN,uFACPC,EAAAA,EAAAA,IAAA,UACbR,EADa,kBACWO,EADX,oBAC4BP,GAAkBC,GAClEQ,OAAM,SAAUC,GACf,GAA8B,MAA1BA,EAAMC,SAASC,OACjB,OAAOC,MAAMH,EAAMC,SAASG,KAAKC,eAEpC,IAP2B,cACxBJ,EADwB,yBAQvBA,GARuB,2CAAH,sDCf7B,GAAgB,MAAQ,sBAAsB,UAAY,2B,SCoE1D,EA/De,WAAO,IAAD,EACnB,GAAsCK,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMhB,EAAK,UAAGe,EAAaE,IAAI,gBAApB,QAAgC,GAErCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVpB,EAAJ,CAGA,IAAMqB,EAAc,mCAAG,6GAEItB,EAAiBC,GAFrB,UAEbI,EAFa,wDAMnBS,EAAaT,EAASG,KAAKe,SANR,gDAQnBhB,MAAM,KAAMiB,SARO,yDAAH,qDAYpBF,GAbC,CAcF,GAAE,CAACrB,EAAOkB,IAeX,OACE,iCACE,kBAAMM,SAfY,SAAAC,GAEpB,GADAA,EAAEC,iBACyB,KAAvBhB,EAAYiB,OACd,OAAOrB,MAAM,eAEfU,EAAgB,CAAEhB,MAAOU,EAAYiB,SACrChB,EAAe,GAChB,EAQkC1B,UAAWC,EAAAA,KAA1C,WACE,kBACED,UAAWC,EAAAA,MACX0C,MAAOlB,EACPmB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,SAdS,SAAAR,GACfd,EAAec,EAAES,OAAON,MACzB,KAcK,mBAAQ3C,UAAWC,EAAAA,UAAe2C,KAAK,SAAvC,uBAIoB,IAArBjB,EAAUuB,SACT,SAACC,EAAA,EAAD,CAAarD,MAAO6B,EAAW5B,WAAYkC,MAIlD,C","sources":["helpers/getTitle.js","webpack://react-homework-template/./src/components/searchFilms/searchFilms.module.css?882f","components/searchFilms/SearchFilms.jsx","services/fetchSearchMovie.js","webpack://react-homework-template/./src/pages/movies/movies.module.css?0ac1","pages/movies/Movies.jsx"],"sourcesContent":["const getTitle = obj => {\n  if (obj.title) {\n    return obj.title;\n  }\n  if (obj.name) {\n    return obj.name;\n  }\n};\n\nexport default getTitle;\n","// extracted by mini-css-extract-plugin\nexport default {\"listFilms\":\"searchFilms_listFilms__gXszz\",\"itemListFilm\":\"searchFilms_itemListFilm__9wVS9\"};","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport getTitle from 'helpers/getTitle';\nimport css from './searchFilms.module.css';\n\nconst SearchFilms = ({ films, onLocation }) => {\n  return (\n    <ul className={css.listFilms}>\n      {films.map(obj => {\n        const title = getTitle(obj);\n        return (\n          <li key={obj.id}>\n            <Link\n              className={css.itemListFilm}\n              to={`/movies/${obj.id}`}\n              state={{ from: onLocation }}\n            >\n              {title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default SearchFilms;\n\nSearchFilms.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired })\n  ),\n  onLocation: PropTypes.object.isRequired,\n};\n","import axios from 'axios';\n\nconst fetchLinks = {\n  URL: 'https://api.themoviedb.org/3/search/movie',\n  KEY: '39009e1fbdefdc1ea3efc46fca7ed6e3',\n};\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzOTAwOWUxZmJkZWZkYzFlYTNlZmM0NmZjYTdlZDZlMyIsInN1YiI6IjY0N2NkMjBiMjYzNDYyMDBmOTI5NWRkZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.LAF8CyGvOhHBE3e-x8-tvz8nNI4gXsXcDzwmj4Y_YN0',\n  },\n};\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios\n    .get(`${fetchLinks.URL}?query=${query}&api_key=${fetchLinks.KEY}`, options)\n    .catch(function (error) {\n      if (error.response.status !== 200) {\n        return alert(error.response.data.status_message);\n      }\n    });\n  return response;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"movies_input__rHz1z\",\"btnSubmit\":\"movies_btnSubmit__8oN9Z\"};","import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport SearchFilms from 'components/searchFilms/SearchFilms';\nimport { fetchSearchMovie } from 'services/fetchSearchMovie';\nimport css from './movies.module.css';\n\nconst Movies = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [dataArray, setDataArray] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    const getFilmByQuery = async () => {\n      try {\n        const response = await fetchSearchMovie(query);\n        if (!response) {\n          return;\n        }\n        setDataArray(response.data.results);\n      } catch (error) {\n        alert(error.message);\n      }\n    };\n\n    getFilmByQuery();\n  }, [query, location]);\n\n  const submitByQuery = e => {\n    e.preventDefault();\n    if (searchValue.trim() === '') {\n      return alert('enter query');\n    }\n    setSearchParams({ query: searchValue.trim() });\n    setSearchValue('');\n  };\n\n  const getValue = e => {\n    setSearchValue(e.target.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={submitByQuery} className={css.form}>\n        <input\n          className={css.input}\n          value={searchValue}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={getValue}\n        />\n        <button className={css.btnSubmit} type=\"submit\">\n          Search\n        </button>\n      </form>\n      {dataArray.length !== 0 && (\n        <SearchFilms films={dataArray} onLocation={location} />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["obj","title","name","films","onLocation","className","css","map","getTitle","to","id","state","from","fetchLinks","options","method","headers","accept","Authorization","fetchSearchMovie","query","axios","catch","error","response","status","alert","data","status_message","useState","searchValue","setSearchValue","dataArray","setDataArray","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","getFilmByQuery","results","message","onSubmit","e","preventDefault","trim","value","type","autoComplete","autoFocus","placeholder","onChange","target","length","SearchFilms"],"sourceRoot":""}